# From: https://github.com/lukka/CppCMakeVcpkgTemplate/blob/main/.github/workflows/hosted-ninja-vcpkg_submod.yml
#
# The peculiarity of this workflow is that assumes vcpkg stored as a submodule of this repository.
# This workflow does the following:
# - Restores vcpkg artifacts from cache.
# - Sets up vcpkg if needed, then run CMake with CMakePreset.json using a configuration that leverages the vcpkg's toolchain file.
#   This will automatically run vcpkg to install dependencies described by the vcpkg.json manifest file.
#   It will be a no-op if those are restored from cache.
# - Finally builds the sources with Ninja.

name: main CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  windows-msvc-debug-github:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - uses: lukka/get-cmake@latest

      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly
      # As used here, the Developer Command Prompt created is targeting x64 and using the default the Windows SDK
      - uses: ilammy/msvc-dev-cmd@v1

      # Run CMake to generate Ninja project files
      - name: Configure and build tests
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'windows-msvc-debug-github'
          buildPreset: 'windows-msvc-debug-github'

      - name: Run tests
        working-directory: ${{github.workspace}}/out/build/windows-msvc-debug-github
        run: ctest -C Debug --output-on-failure
        shell: bash

  windows-msvc-release-tests:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - uses: lukka/get-cmake@latest

      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly
      # As used here, the Developer Command Prompt created is targeting x64 and using the default the Windows SDK
      - uses: ilammy/msvc-dev-cmd@v1

      # Run CMake to generate Ninja project files
      - name: Configure and build benchmarks
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'windows-msvc-release-tests'
          buildPreset: 'windows-msvc-release-tests'

      - name: Run tests
        working-directory: ${{github.workspace}}/out/build/windows-msvc-release-tests
        run: ctest -C Release --output-on-failure
        shell: bash

  unixlike-gcc-debug-github:
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Get latest CMake
        uses: lukka/get-cmake@latest

      # Run CMake to generate Ninja project files
      - name: Configure and build tests in debug mode
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'unixlike-gcc-debug-github'
          buildPreset: 'unixlike-gcc-debug-github'

      - name: Run tests
        working-directory: ${{ github.workspace }}/out/build/unixlike-gcc-debug-github
        run: |
          export ASAN_OPTIONS=detect_odr_violation=0
          ctest -C Debug --output-on-failure
        shell: bash

      - name: Collect code coverage
        working-directory: ${{ github.workspace }}/out/build/unixlike-gcc-debug-github
        run: bash <(curl -s https://codecov.io/bash)
        shell: bash

  unixlike-gcc-release-tests:
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Get latest CMake
        uses: lukka/get-cmake@latest

      # Run CMake to generate Ninja project files
      - name: Configure and build benchmarks and tests in release mode
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'unixlike-gcc-release-tests'
          buildPreset: 'unixlike-gcc-release-tests'

      - name: Run tests
        working-directory: ${{ github.workspace }}/out/build/unixlike-gcc-release-tests
        run: |
          export ASAN_OPTIONS=detect_odr_violation=0
          ctest -C Release --output-on-failure
        shell: bash
